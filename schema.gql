# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Team {
  id: ID!
  name: String!
  description: String!
  owner: User!
  members: [User!]
  projects: [Project!]
}

type Project {
  id: ID!
  name: String!
  description: String!
  creationDate: Date!
  owner: User!
  team: Team
  active: Boolean!
}

"""Date custom scalar type"""
scalar Date

type Task {
  id: ID!
  title: String!
  description: String!
  priority: Int!
  creationDate: Date!
  lastModified: Date
  project: Project!
  active: Boolean!
  creator: User!
  followers: [User]!
  assignments: [Assignment]!
  comments: [Comment]!
}

type Comment {
  id: ID!
  task: Task!
  user: User!
  creationDate: Date!
  body: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  creationDate: Date!
  isAdmin: Boolean!
  ownedTeams: [Team!]
  teams: [Team!]
  tasks: [Task!]
  myTasks: [Task!]
  assignments: [Assignment!]
  entries: [Entry!]
  comments: [Comment]!
}

type Entry {
  id: ID!
  startTime: Date
  finishTime: Date
  note: String
  user: User!
  assignment: Assignment
}

type Assignment {
  id: ID!
  creator: User!
  creationDate: Date!
  user: User!
  task: Task!
  deadline: Date
  note: String
  status: Status
  entries: [Entry]
  totalTime: Int
}

type Status {
  code: ID!
  label: String!
  order: Int!
  assignments: [Assignment!]!
}

type TeamsResult {
  result: [Team!]!
  total: Int!
}

type ProjectsResult {
  result: [Project!]!
  total: Int!
}

type TasksResult {
  result: [Task!]!
  total: Int!
}

type AssignmentsResult {
  result: [Assignment!]!
  total: Int!
}

type CommentsResult {
  result: [Comment!]!
  total: Int!
}

type EntriesResult {
  result: [Entry!]!
  total: Int!
  totalTime: Int!
}

type Query {
  user(id: ID!): User!
  users: [User!]!
  loggedUser: User!
  team(id: ID!): Team!
  teams(skip: Int = 0, take: Int = 25, name: String, ownerId: ID): TeamsResult
  myTeams: [Team!]
  project(id: ID!): Project!
  projects(skip: Int = 0, take: Int = 25, name: String, active: Boolean, ownerId: ID, teamId: ID): ProjectsResult!
  myProjects: [Project!]
  task(id: ID!): Task!
  tasks(skip: Int = 0, take: Int = 25, title: String, projectId: ID, active: Boolean, followerIds: [ID!]): TasksResult!
  assignment(id: ID!): Assignment!
  assignments(skip: Int = 0, take: Int = 25, userId: ID, taskId: ID, statusCode: ID): AssignmentsResult!
  status(code: ID!): Status!
  statuses: [Status!]!
  entry(id: ID!): ID!
  entries(skip: Int = 0, take: Int = 25, note: String, userId: ID, assignmentId: ID): EntriesResult!
  comment(id: ID!): Comment!
  comments(skip: Int = 0, take: Int = 25, taskId: ID, userId: ID): CommentsResult!
}

type Mutation {
  updateUserPassword(data: UpdatePasswordInput!): User!
  removeUser: User!
  createTeam(data: NewTeamInput!): Team!
  removeTeam(id: ID!): Team!
  updateTeam(data: UpdateTeamInput!, id: ID!): Team!
  addTeamMember(userId: ID!, teamId: ID!): Team!
  removeTeamMember(userId: ID!, teamId: ID!): Team!
  createProject(teamId: ID, data: NewProjectInput!): Project!
  updateProject(data: UpdateProjectInput!, id: ID!): Project!
  removeProject(id: ID!): Project!
  createTask(data: NewTaskInput!): Task!
  updateTask(data: UpdateTaskInput!, id: ID!): Task!
  removeTask(id: ID!): Task!
  addTaskFollower(userId: ID!, id: ID!): Task!
  removeTaskFollower(userId: ID!, id: ID!): Task!
  createAssignment(data: NewAssignmentInput!): Assignment!
  updateAssignment(data: UpdateAssignmentInput!, id: ID!): Assignment!
  removeAssignment(id: ID!): Assignment!
  createStatus(data: NewStatusInput!): Status!
  updateStatus(data: UpdateStatusInput!, code: ID!): Status!
  removeStatus(code: ID!): Status!
  createEntry(data: NewEntryInput!): Entry!
  updateEntry(data: UpdateEntryInput!, id: ID!): Entry!
  removeEntry(id: ID!): Entry!
  startEntry(id: ID!): Entry!
  stopEntry(id: ID!): Entry!
  createComment(taskId: ID!, data: NewCommentInput!): Comment!
  updateComment(data: UpdateCommentInput!, id: ID!): Comment!
  removeComment(id: ID!): Comment!
}

input UpdatePasswordInput {
  password: String!
}

input NewTeamInput {
  name: String!
  description: String!
}

input UpdateTeamInput {
  name: String
  description: String
}

input NewProjectInput {
  name: String!
  description: String!
  active: Boolean = true
}

input UpdateProjectInput {
  name: String
  description: String
  active: Boolean = true
}

input NewTaskInput {
  title: String!
  description: String
  priority: Int = 0
  active: Boolean
  projectId: ID!
}

input UpdateTaskInput {
  title: String
  description: String
  priority: Int = 0
  active: Boolean
}

input NewAssignmentInput {
  taskId: ID!
  note: String
  deadline: Date
  userId: ID
  statusCode: ID
}

input UpdateAssignmentInput {
  note: String
  deadline: Date
  userId: ID
  statusCode: ID
}

input NewStatusInput {
  code: String!
  label: String!
  order: Int!
}

input UpdateStatusInput {
  label: String
  order: Int
}

input NewEntryInput {
  startTime: Date
  finishTime: Date
  note: String
  assignmentId: ID
}

input UpdateEntryInput {
  startTime: Date
  finishTime: Date
  note: String
}

input NewCommentInput {
  body: String!
}

input UpdateCommentInput {
  body: String
}

type Subscription {
  teamAdded(input: TeamAddedInput): Team!
  teamRemoved(input: TeamAddedInput): Team!
  projectAdded(input: ProjectAddedInput): Project!
  projectRemoved(input: ProjectAddedInput): Project!
  taskAdded(input: TaskAddedInput): Task!
  taskRemoved(input: TaskAddedInput): Task!
  assignmentAdded(input: AssignmentAddedInput): Assignment!
  assignmentRemoved(input: AssignmentAddedInput): Assignment!
  entryAdded(input: EntryChangedInput): Entry!
  entryRemoved(input: EntryChangedInput): Entry!
  entryStarted(input: EntryChangedInput): Entry!
  entryStopped(input: EntryChangedInput): Entry!
  commentAdded(input: CommentAddedInput): Comment!
  commentRemoved(input: CommentAddedInput): Comment!
}

input TeamAddedInput {
  ownerId: ID
}

input ProjectAddedInput {
  ownerId: ID
  teamId: ID
}

input TaskAddedInput {
  title: String
  active: Boolean
  projectId: ID
}

input AssignmentAddedInput {
  userId: ID
  taskId: ID
}

input EntryChangedInput {
  userId: ID
  assignmentId: ID
}

input CommentAddedInput {
  taskId: ID
}
